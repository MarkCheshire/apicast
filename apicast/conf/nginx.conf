## NEED CHANGE (defines the user of the nginx workers)
# user user group;

##Â THIS PARAMETERS BE SAFELY OVER RIDDEN BY YOUR DEFAULT NGINX CONF
worker_processes 1;
env THREESCALE_DEPLOYMENT_ENV;
env THREESCALE_PORTAL_ENDPOINT;
env THREESCALE_CONFIG_FILE;
env APICAST_CUSTOM_CONFIG;
env APICAST_PATH_ROUTING_ENABLED;
env REDIS_HOST;
env REDIS_PORT;

# error_log stderr notice;
# error_log logs/error.log warn;

error_log stderr info;

events {
    worker_connections 256;
}

http {
  lua_shared_dict api_keys 10m;
  lua_shared_dict configuration 10m;
  lua_shared_dict locks 1m;

  server_names_hash_bucket_size 128;

  access_log /dev/stdout combined;

  lua_package_path ";;${prefix}?.lua;${prefix}src/?.lua";

  # Enabling the Lua code cache is strongly encouraged for production use. Here it is enabled by default for testing and development purposes
  lua_code_cache on;

  init_by_lua_block {
    require('luarocks.loader')

    local config = require('configuration').init()

    if config then
      require('provider').init(config)
      configuration = config
    else
      ngx.log(ngx.ERR, 'boot configuration load failed')
    end
  }

  init_worker_by_lua_block {
    if configuration ~= require('provider').contents then
      ngx.log(ngx.ERR, 'global configuration and stored does not match')
    end
  }

  include ../http.d/*.conf;

  server {
    listen 8090;

    server_name _;

    include ../conf.d/management.conf;
  }

  server {
    listen 8081;

    server_name backend;

    include ../conf.d/backend.conf;
  }

  server {
    listen 8080;

    server_name _;
    underscores_in_headers on;

    include ../conf.d/apicast.conf;
  }

  include ../sites.d/*.conf;
}
